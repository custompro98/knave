---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Knave</title>
  </head>
  <script>
    // Helper function
    /** @ts-ignore-next-line */
    let domReady = (cb) => {
      document.readyState === "interactive" ||
      document.readyState === "complete"
        ? cb()
        : document.addEventListener("DOMContentLoaded", cb);
    };

    domReady(() => {
      // Display body when DOM is loaded
      document.body.style.visibility = "visible";
    });
  </script>
  <body class="flex min-h-screen flex-col" style="visibility: hidden">
    <header
      class="bg-flame-500 flex h-24 flex-row items-center justify-center p-4"
    >
      <h1 class="font-heading text-5xl font-bold tracking-wide">Knave</h1>
    </header>
    <main class="mb-auto">
      <section class="mx-auto max-w-screen-xl p-4" x-data="{ knaves: [] }">
        <div class="flex flex-row justify-between pb-2">
          <h2 class="font-heading text-3xl tracking-tight">Knaves</h2>
        </div>
        <div class="grid grid-cols-1 gap-2 md:grid-cols-3">
          <div
            class="shadow-bold flex min-h-[25rem] max-w-sm cursor-pointer flex-col items-center justify-center border-2 border-black p-2"
            x-on:click="knaves = [rollKnave(), ...knaves]"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.0"
              stroke="currentColor"
              class="size-20 text-black"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M12 4.5v15m7.5-7.5h-15"></path>
            </svg>
          </div>
          <template x-for="knave in knaves">
            <div class="shadow-bold max-w-sm border-2 border-black p-2">
              <div class="flex flex-row items-center justify-between">
                <div>
                  <h3 class="font-serif text-lg" x-text="knave.name"></h3>
                </div>
                <div
                  class="flex flex-row items-center gap-2 text-sm text-black/75"
                >
                  <span class="font-serif"
                    >Level: <span x-text="knave.level"></span></span
                  >
                  <span class="font-serif"
                    >XP: <span x-text="knave.xp"></span></span
                  >
                </div>
              </div>
              <div class="flex flex-row gap-1 pb-2 text-sm text-black/75">
                <span>Former</span>
                <span class="lowercase" x-text="knave.firstCareer"></span>
              </div>
              <div class="grid grid-cols-3 gap-2 pb-2">
                <div class="flex flex-col items-center justify-center">
                  <h4 class="text-sm text-black/75">STR</h4>
                  <span class="text-lg" x-text="knave.str"></span>
                </div>
                <div class="flex flex-col items-center justify-center">
                  <h4 class="text-sm text-black/75">DEX</h4>
                  <span class="text-lg" x-text="knave.dex"></span>
                </div>
                <div class="flex flex-col items-center justify-center">
                  <h4 class="text-sm text-black/75">CON</h4>
                  <span class="text-lg" x-text="knave.con"></span>
                </div>
                <div class="flex flex-col items-center justify-center">
                  <h4 class="text-sm text-black/75">INT</h4>
                  <span class="text-lg" x-text="knave.int"></span>
                </div>
                <div class="flex flex-col items-center justify-center">
                  <h4 class="text-sm text-black/75">WIS</h4>
                  <span class="text-lg" x-text="knave.wis"></span>
                </div>
                <div class="flex flex-col items-center justify-center">
                  <h4 class="text-sm text-black/75">CHA</h4>
                  <span class="text-lg" x-text="knave.cha"></span>
                </div>
              </div>
              <div>
                <h4 class="text-lg">Inventory</h4>
                <div class="grid grid-cols-2 gap-2">
                  <template x-for="(item, index) in knave.items">
                    <div
                      class="flex flex-row items-center gap-1"
                      x-id="['text-input']"
                    >
                      <label
                        class="text-sm text-black/75"
                        :for="$id('text-input')"
                      >
                        <span x-text="index + 1"></span><span>.</span>
                      </label>
                      <input
                        class="max-w-40 border border-gray-200/75"
                        type="text"
                        x-model="item"
                        :id="$id('text-input')"
                      />
                    </div>
                  </template>
                </div>
              </div>
            </div>
          </template>
        </div>
      </section>
    </main>
    <footer
      class="bg-flame-500 flex h-24 flex-row items-center justify-center p-4"
    >
      <span>
        Buy <span class="font-heading">Knave</span> on <a
          class="text-blue-500 hover:underline"
          href="https://www.drivethrurpg.com/en/product/484910/knave-second-edition"
          >DriveThruRPG</a
        >
      </span>
    </footer>
  </body>

  <script>
    import Alpine from "alpinejs";
    import { rollOnTable } from "knave-2e-generator";

    function rolld6() {
      return Math.floor(Math.random() * 6) + 1;
    }

    declare global {
      interface Window {
        Alpine: typeof Alpine;

        rollKnave: () => ReturnType<typeof rollKnave>;

        rollMonster: () => ReturnType<typeof rollOnTable>;
        rollMonsterTrait: () => ReturnType<typeof rollOnTable>;
        rollScent: () => ReturnType<typeof rollOnTable>;
        rollWeakness: () => ReturnType<typeof rollOnTable>;
      }
    }

    const abilities = ["str", "dex", "con", "int", "wis", "cha"];

    function makeAbilityScoreCounter(rolls: number[]) {
      return function (ability: (typeof abilities)[number]) {
        const targetIdx = abilities.indexOf(ability);

        return rolls.reduce((acc, roll) => {
          if (roll - 1 == targetIdx) {
            return acc + 1;
          }
          return acc;
        }, 0);
      };
    }

    function itemsFromCareer(career: string) {
      return career // name (item1, item2, item3)
        .split("(")[1] // item1, item2, item3)
        .split(",") // ['item1', ' item2', ' item3)']
        .map((item) => item.trim()) // ['item1', 'item2', 'item3)']
        .map((item) => item.replace(/\)$/, "")); // ['item1', 'item2', 'item3']
    }

    function careerName(career: string) {
      return career // name (item1, item2, item3)
        .split("(")[0] // 'name '
        .trim(); // name
    }

    function rollKnave() {
      const name = rollOnTable("names");
      const rolls = [rolld6(), rolld6(), rolld6()];

      const generateAbilityScore = makeAbilityScoreCounter(rolls);
      const con = generateAbilityScore("con");
      const items = [...Array(10 + con)];

      const firstCareer = rollOnTable("careers");

      itemsFromCareer(firstCareer).forEach((item, idx) => {
        items[idx] = item;
      });

      return {
        name,
        str: generateAbilityScore("str"),
        dex: generateAbilityScore("dex"),
        con: con,
        int: generateAbilityScore("int"),
        wis: generateAbilityScore("wis"),
        cha: generateAbilityScore("cha"),
        level: 1,
        xp: 0,
        items,
        hp: rolld6(),
        firstCareer: careerName(firstCareer),
      };
    }

    window.Alpine = Alpine;
    window.rollKnave = rollKnave;
  </script>
  <style is:global>
    [x-cloak] {
      display: none !important;
    }

    @font-face {
      font-family: "SebaldusGotisch";
      src: url("/fonts/SebaldusGotisch.ttf") format("truetype");
      font-weight: normal;
      font-style: normal;
      font-display: swap;
    }
  </style>
</html>
